# 使用RestTemplate进行远程调用

1. 注册RestTemplate

    ```java
    //在order-service服务中的OrderApplication启动类中，注册RestTemplate实例：
    
    package cn.itcast.order;
    
    import org.mybatis.spring.annotation.MapperScan;
    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;
    import org.springframework.context.annotation.Bean;
    import org.springframework.web.client.RestTemplate;
    
    @MapperScan("cn.itcast.order.mapper")
    @SpringBootApplication
    public class OrderApplication {
    
        public static void main(String[] args) {
            SpringApplication.run(OrderApplication.class, args);
        }
    
        @Bean
        public RestTemplate restTemplate() {
            return new RestTemplate();
        }
    }
    ```

2. 使用RestTemplate发起远程调用

    ```java
    package cn.itcast.order.service;
    
    import cn.itcast.order.mapper.OrderMapper;
    import cn.itcast.order.pojo.Order;
    import cn.itcast.order.pojo.User;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.stereotype.Service;
    import org.springframework.web.client.RestTemplate;
    
    @Service
    public class OrderService {
    
        @Autowired
        private OrderMapper orderMapper;
    
        @Autowired
        private RestTemplate restTemplate;
    
        public Order queryOrderById(Long orderId) {
            //查出订单的基本信息(此时无用户相关信息)
            Order order = orderMapper.findById(orderId);
    
            //利用RestTemplate发起HTTP请求，并将结果JSON封装为对象
            String url = "http://localhost:8081/user/" + order.getUserId();
            User user = restTemplate.getForObject(url, User.class);
    
            order.setUser(user);
            return order;
        }
    }
    ```




# 服务者与消费者模型

在服务调用关系中，会有两个不同的角色：

- 提供者：在一次业务中，被其他微服务调用的服务。（即提供接口给其他微服务）
- 消费者：在一次业务中，调用其他微服务的服务。（即调用其他微服务提供的接口）

![image-20220314232539863](%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0.assets/image-20220314232539863-164727154116315.png)

> 这是一种相对的概念



# Eureka注册中心

在进行远程调用，需要解决的问题：

- 服务的请求地址，被硬编码在代码中：
    - 服务可能随着生成环境的变更，而改变地址
    - 服务可能被组成集群
- 服务消费者，如何得知服务提供者的地址信息
- 如果存在多个提供者，消费者如何进行选择
- 消费者如何得知服务提供者的健康状态



## Eureka的结构和作用

Eureka的角色分配：

- eureka-client：服务提供者，与服务消费者
- eureka-server(注册中心)

![image-20220314232742079](%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0.assets/image-20220314232742079-164727166495216.png)





==eureka如何解决远程调用的问题==：

- 服务消费者，如何得知服务提供者的地址信息：
    1. 服务启动时：向eureka注册自己的信息
    2. eureka保持这些信息
    3. 消费者根据服务名称，向eureka拉取提供者信息
- 如果存在多个提供者，消费者如何进行选择：
    - 服务消费者，根据负载均衡算法，从服务列表中挑选一个
- 消费者如何得知服务提供者的健康状态：
    1. 服务提供者，每隔30秒向EurekaServer发送心跳请求，报告健康状态
    2. eureka会更新记录服务列表信息，不正常的将会被剔除
    3. 消费者每次拉取最新的信息

## 搭建Eureka-Server

在使用Eureak进行服务注册与发现前，需要先==注册中心服务端==：eureka-server，这必须是一个独立的微服务



搭建EurekaServer服务的步骤如下：

1. 创建项目，引入spring-cloud-starter-netflix-==**server**==的依赖

    ```xml
    <dependency>
        <groupId>org.springframework.cloud</groupId>
        <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
    </dependency>
    ```

2. 编写启动类，添加`@EnableEruekaServer`注解

    ```java
    package cn.itcast.eureka;
    
    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;
    import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;
    
    @SpringBootApplication
    @EnableEurekaServer
    public class EurekaApplication {
        public static void main(String[] args) {
            SpringApplication.run(EurekaApplication.class, args);
        }
    }
    ```

3. 编写配置(application.yml)

    ```yaml
    server:
      port: 10086
    spring:
      application:
        name: eureka-server
    eureka:
      client:
        service-url: 
          defaultZone: <http://127.0.0.1:10086/eureka>
    ```

	>Eureka-Server服务本身也需要进行服务注册。使得之后能形成Eureka服务集群
	
4. 启动Eureka-Server服务

## Eureka的服务注册

将eureka-client(此处即为user-service服务)注册到eureka-server中：

1. 引入依赖

    在user-service的pom文件中，引入下面的eureka-==**client**==依赖：

    ```xml
    <dependency>
        <groupId>org.springframework.cloud</groupId>
        <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
    </dependency>    
    ```

2. 配置文件

    在user-service中，修改application.yml文件，添加服务名称、eureka地址：

    ```yaml
    spring:
      application:
        name: userservice
    eureka:
      client:
        service-url:
          defaultZone: http://127.0.0.1:10086/eureka
    ```


3. 启动服务实例

1. 在其组件`RestTemplate`上，添加注解`@LoadBalanced`即可引入依赖

    ```xml
    <dependency>
        <groupId>org.springframework.cloud</groupId>
        <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
    </dependency>
    ```

2. 配置文件

    ```yaml
    spring:
      application:
        name: orderservice
    eureka:
      client:
        service-url:
          defaultZone: http://127.0.0.1:10086/eureka
    ```

3. 服务拉取与负载均衡

    如何拉取到服务：使用==<u>服务名</u>替代<u>IP与端口号</u>==

    ```java
    @Service
    public class OrderService {
    
        @Autowired
        private OrderMapper orderMapper;
        @Autowired
        private RestTemplate restTemplate;
    
        public Order queryOrderById(Long orderId) {
            Order order = orderMapper.findById(orderId);
            //IP与端口号，被服务名替代
            String url = "http://userservice/user/" + order.getUserId();
            User user = restTemplate.getForObject(url, User.class);
    
            order.setUser(user);
            return order;
        }
    }
    ```

    

    当order-service服务，从eureka-server中拉取到user-service服务后，order-serivce服务本身需要进行负载均衡。

    只需在其组件`RestTemplate`上，添加注解`@LoadBalanced`即可

    ```java
    @MapperScan("cn.itcast.order.mapper")
    @SpringBootApplication  //启动类也是配置类
    public class OrderApplication {
    
        public static void main(String[] args) {
            SpringApplication.run(OrderApplication.class, args);
        }
    
        @Bean
        @LoadBalanced
        public RestTemplate restTemplate(){
            return new RestTemplate();
        }
    }
    ```

    

# Ribbon负载均衡

在[上一节](#Eureka的服务注册)中，为`RestTemplate`组件，添加了注解`@LoadBalanced`，从而实现了负载均衡功能。

## 负载均衡的大致流程

SpringCloud底层其实是利用了一个名为Ribbon的组件，来实现负载均衡功能的。

![image-20220314235227331](%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0.assets/image-20220314235227331.png)

那么我们发出的请求明明是http://userservice/user/1，怎么变成了http://localhost:8081的呢？

## 源码跟踪

为什么我们只输入了service名称就可以访问了呢？之前还要获取ip和端口。

显然有人帮我们根据service名称，获取到了服务实例的ip和端口。它就是`LoadBalancerInterceptor`，这个类会==对RestTemplate的请求进行拦截==，然后从Eureka根据服务id获取服务列表，随后利用负载均衡算法得到真实的服务地址信息，替换服务id。



源码跟踪如下：

### LoadBalancerIntercepor

![image-20220314235453706](%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0.assets/image-20220314235453706.png)

可以看到这里的intercept方法，拦截了用户的HttpRequest请求，然后做了几件事：

- `request.getURI()`：获取请求uri，本例中就是 http://user-service/user/8
- `originalUri.getHost()`：获取uri路径的主机名，其实就是服务id，`user-service`
- `this.loadBalancer.execute()`：处理服务id，和用户请求。

这里的`this.loadBalancer`是`LoadBalancerClient`类型，我们继续跟入。

### LoadBalancerClient

继续跟入execute方法：

![1525620787090](%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0.assets/1525620787090.png)

代码是这样的：

- getLoadBalancer(serviceId)：根据服务id获取ILoadBalancer，而ILoadBalancer会拿着服务id去eureka中获取服务列表并保存起来。
- getServer(loadBalancer)：利用内置的负载均衡算法，从服务列表中选择一个。本例中，可以看到获取了8082端口的服务。
	​放行后，再次访问并跟踪，发现获取的是8081：
	![1525620835911](%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0.assets/1525620835911.png)

### 负载均衡策略IRule

在刚才的代码中，可以看到获取服务使通过一个`getServer`方法来做负载均衡:

![image-20220314235609952](%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0.assets/image-20220314235609952.png)

我们继续跟入：

![1544361421671](%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0.assets/1544361421671.png)

继续跟踪源码chooseServer方法，发现这么一段代码：

![image-20220314235620759](%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0.assets/image-20220314235620759.png)

看看这个rule是谁：

![image-20220314235640663](%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0.assets/image-20220314235640663.png)

>rule默认值是一个`RoundRobinRule`，看类的介绍：

![image-20220314235700551](%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0.assets/image-20220314235700551.png)

### 总结

SpringCloudRibbon的底层采用了一个拦截器，拦截了RestTemplate发出的请求，对地址做了修改。用一幅图来总结一下：

![image-20220314235724231](%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0.assets/image-20220314235724231.png)

基本流程如下：

- 拦截我们的RestTemplate请求http://userservice/user/1
- RibbonLoadBalancerClient会从请求url中获取服务名称，也就是user-service
- DynamicServerListLoadBalancer根据user-service到eureka拉取服务列表
- eureka返回列表，localhost:8081、localhost:8082
- IRule利用内置负载均衡规则，从列表中选择一个，例如localhost:8081
- RibbonLoadBalancerClient修改请求地址，用localhost:8081替代userservice，得到http://localhost:8081/user/1，发起真实请求

## 负载均衡策略

负载均衡的规则都定义在IRule接口中，而IRule有很多不同的实现类：

![image-20220314235807099](%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0.assets/image-20220314235807099.png)

不同规则的含义如下：

| **内置负载均衡规则类**    | **规则描述**                                                 |
| ------------------------- | ------------------------------------------------------------ |
| RoundRobinRule            | 简单轮询服务列表来选择服务器。它是Ribbon默认的负载均衡规则。 |
| AvailabilityFilteringRule | 对以下两种服务器进行忽略：   （1）在默认情况下，这台服务器如果3次连接失败，这台服务器就会被设置为“短路”状态。短路状态将持续30秒，如果再次连接失败，短路的持续时间就会几何级地增加。  （2）并发数过高的服务器。如果一个服务器的并发连接数过高，配置了AvailabilityFilteringRule规则的客户端也会将其忽略。并发连接数的上限，可以由客户端的<clientName>.<clientConfigNameSpace>.ActiveConnectionsLimit属性进行配置。 |
| WeightedResponseTimeRule  | 为每一个服务器赋予一个权重值。服务器响应时间越长，这个服务器的权重就越小。这个规则会随机选择服务器，这个权重值会影响服务器的选择。 |
| **ZoneAvoidanceRule**     | 以区域可用的服务器为基础进行服务器的选择。使用Zone对服务器进行分类，这个Zone可以理解为一个机房、一个机架等。而后再对Zone内的多个服务做轮询。 |
| BestAvailableRule         | 忽略那些短路的服务器，并选择并发数较低的服务器。             |
| RandomRule                | 随机选择一个可用的服务器。                                   |
| RetryRule                 | 重试机制的选择逻辑                                           |

>默认的实现就是ZoneAvoidanceRule，是一种轮询方案

### 自定义负载均衡策略

通过定义IRule实现可以修改负载均衡规则，有两种方式：

- 代码方式：在order-service中的OrderApplication类中，定义一个新的IRule：
	```java
    @Bean
    public IRule randomRule(){
        return new RandomRule();
    }
  ```

- 配置文件方式：在order-service的application.yml文件中，添加新的配置也可以修改规则：

    ```yaml
    userservice: # 给某个微服务配置负载均衡规则，这里是userservice服务
      ribbon:
        NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule # 负载均衡规则 

## 饥饿加载

Ribbon默认是采用懒加载，即第一次访问时才会去创建LoadBalanceClient，请求时间会很长。

而==饥饿加载则会在项目启动时创建==，降低第一次访问的耗时，通过下面配置开启饥饿加载：

```yaml
ribbon:
  eager-load:
    enabled: true
    clients: userservice
```



# Nacos注册中心

国内公司一般都推崇阿里巴巴的技术，比如注册中心，SpringCloudAlibaba也推出了一个名为Nacos的注册中心。



[Nacos](https://nacos.io/)是阿里巴巴的产品，现在是[SpringCloud](https://spring.io/projects/spring-cloud)中的一个组件。相比[Eureka](https://github.com/Netflix/eureka)功能更加丰富，在国内受欢迎程度较高。

## Nacos的安装

具体步骤见[Nacos安装指南](.\Nacos安装指南.md)

1. 下载安装包：windows版本使用`nacos-server-1.4.1.zip`包即可。

2. 将其解压

    

## Nacos端口配置

> Nacos的默认端口是8848



可在nacos的**conf目录中的application.properties**，修改配置文件中的端口：

![image-20220315000920610](%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0.assets/image-20220315000920610.png)

## Nacos启动

### 单机启动

在bin目录，执行命令(windows命令)：

```sh
startup.cmd -m standalone
```

## 集群启动

```sh
startup.cmd
```



## Nacos依赖

父工程：

```xml
<dependency>
    <groupId>com.alibaba.cloud</groupId>
    <artifactId>spring-cloud-alibaba-dependencies</artifactId>
    <version>2.2.5.RELEASE</version>
    <type>pom</type>
    <scope>import</scope>
</dependency>
```



客户端：

```xml
<!-- nacos客户端依赖包 -->
<dependency>
    <groupId>com.alibaba.cloud</groupId>
    <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>
</dependency>

```

## Nacos服务注册

>Nacos是SpringCloudAlibaba的组件，而SpringCloudAlibaba也遵循SpringCloud中定义的服务注册、服务发现规范。因此使用Nacos和使用Eureka对于微服务来说，并没有太大区别。
>
>主要差异在于：
>
>- 依赖不同
>- 服务地址不同

### 引入依赖

在cloud-demo父工程的pom文件中的`<dependencyManagement>`中引入SpringCloudAlibaba的依赖：

```xml
<dependency>
    <groupId>com.alibaba.cloud</groupId>
    <artifactId>spring-cloud-alibaba-dependencies</artifactId>
    <version>2.2.6.RELEASE</version>
    <type>pom</type>
    <scope>import</scope>
</dependency>
```

然后在user-service和order-service中的pom文件中引入nacos-discovery依赖：

```xml
<dependency>
    <groupId>com.alibaba.cloud</groupId>
    <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>
</dependency>
```



###配置nacos地址

在user-service和order-service的application.yml中添加nacos地址：

```yaml
spring:
  cloud:
    nacos:
      server-addr: localhost:8848
```

### 启动Nacos服务

具体步骤见[Nacos启动](#Nacos启动)

## 服务分级存储模型

一个**服务**可以有多个**实例**，例如我们的user-service，可以有:

- 127.0.0.1:8081
- 127.0.0.1:8082
- 127.0.0.1:8083

假如这些实例分布于全国各地的不同机房，例如：

- 127.0.0.1:8081，在上海机房
- 127.0.0.1:8082，在上海机房
- 127.0.0.1:8083，在杭州机房

> Nacos就将同一机房内的实例，划分为一个**集群**。



也就是说，user-service是服务，一个服务可以包含多个集群，如杭州、上海，每个集群下可以有多个实例，形成分级模型，如图：

![image-20220315001513780](%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0.assets/image-20220315001513780.png)



微服务互相访问时，应该尽可能访问同集群实例，因为本地访问速度更快。当本集群内不可用时，才访问其它集群。例如：

![image-20220315001524631](%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0.assets/image-20220315001524631.png)

杭州机房内的order-service应该优先访问同机房的user-service。

### 配置集群

修改user-service的application.yml文件，添加集群配置：

```yaml
spring:
  cloud:
    nacos:
      server-addr: localhost:8848
      discovery:
        cluster-name: HZ # 集群名称
```

### 同集群优先的负载均衡

>默认的`ZoneAvoidanceRule`并不能实现根据同集群优先来实现负载均衡。



因此Nacos中提供了一个`NacosRule`的实现，可以优先从同集群中挑选实例。

1. 给order-service配置集群信息

    修改order-service的application.yml文件，添加集群配置：

    ```sh
    spring:
      cloud:
        nacos:
          server-addr: localhost:8848
          discovery:
            cluster-name: HZ # 集群名称
    ```

2. 修改负载均衡规则

    修改order-service的application.yml文件，修改负载均衡规则：

    ```yaml
    userservice:
      ribbon:
        NFLoadBalancerRuleClassName: com.alibaba.cloud.nacos.ribbon.NacosRule # 负载均衡规则 
    ```




### 权重配置

服务器设备性能有差异，部分实例所在机器性能较好，另一些较差，我们希望性能好的机器承担更多的用户请求。

> 但默认情况下NacosRule是同集群内随机挑选，不会考虑机器的性能问题。



因此，Nacos提供了权重配置来控制访问频率，==权重越大则访问频率越高==。

在nacos控制台，找到user-service的实例列表，点击编辑，即可修改权重：

![image-20220315001928037](%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0.assets/image-20220315001928037.png)

在弹出的编辑窗口，修改权重：

<img src="%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0.assets/image-20220315001936485.png" alt="image-20220315001936485" style="zoom:50%;" />

>**注意**：如果权重修改为0，则该实例永远不会被访问

## 环境隔离

Nacos提供了namespace来实现环境隔离功能。

- nacos中可以有多个namespace

- namespace下可以有group、service等

    > 不同namespace之间相互隔离，例如**不同namespace的服务互相不可见**

- service下有各个服务的多个实例

![image-20220315002043839](%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0.assets/image-20220315002043839.png)

### 创建namespace

> 默认情况下，所有service、data、group都在同一个namespace，名为public

<img src="%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0.assets/image-20220315002125292.png" alt="image-20220315002125292" style="zoom: 67%;" />



我们可以点击页面新增按钮，添加一个namespace：

![image-20220315002208238](%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0.assets/image-20220315002208238.png)

然后，填写表单：

![image-20220315002248862](%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0.assets/image-20220315002248862.png)

> 命名空间ID，将来要配置在application.yml中



###给微服务配置namespace

给微服务配置namespace只能通过修改配置来实现。

例如，修改order-service的application.yml文件：

```yaml
spring:
  cloud:
    nacos:
      server-addr: localhost:8848
      discovery:
        cluster-name: HZ
        namespace: 492a7d5d-237b-46a1-a99a-fa8e98e4b0f9 # 命名空间，填ID
```

# Nacos与Eureka的区别

Nacos的服务实例分为两种类型：

- 临时实例：如果实例宕机超过一定时间，会从服务列表剔除，默认的类型。

- 非临时实例：如果实例宕机，不会从服务列表剔除，也可以叫永久实例。
	 ```yaml
    spring:
      cloud:
        nacos:
          discovery:
            ephemeral: false # 设置为非临时实例
   ```



Nacos和Eureka整体结构类似，服务注册、服务拉取、心跳等待，但是也存在一些差异：

![image-20220315002607474](%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0.assets/image-20220315002607474.png)



# 使用Feign进行远程调用
