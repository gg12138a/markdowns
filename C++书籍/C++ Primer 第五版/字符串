# 标准库类型string

用于表示可变长的字符序列，需要先引入头文件：`<string>`

> string类型，位于名称空间std



# 定义和初始化string

```C++
string s1;				// 默认初始化，为空字符串
string s2 = s1;			// 是s1的副本
string s3 = "hiya";		
string s4(10,'c');		// 为"cccccccccc"
```

![image-20220713153540186](%E5%AD%97%E7%AC%A6%E4%B8%B2.assets/image-20220713153540186.png)



>- 拷贝初始化：调用operator =
>- 直接初始化：调用构造方法



# string类的操作

![image-20220713153843715](%E5%AD%97%E7%AC%A6%E4%B8%B2.assets/image-20220713153843715.png)





## 读写string对象

```C++
int main(){
    string s;
    cin>>s;				// 从cin读入s，遇到“空白”停止
    cout<< s <<endl;	

    return 0;
}
```



- 当进行读取操作时：

  会忽略开头的“空白”，并在遇到“空白”时停止

  >### 💡 “空白”指：
  >
  >- 空格符
  >- 换行符
  >- 制表符等

  > getline()方法，会读取开头的空白，遇到换行符结束。



## size()方法

其返回的类型，为`std::string::size_type`类型。

> 是一个无符号整数。



注意，如果在表达式中，混用了无符号数和有符号数，可能产生意想不到的结果：

```C++
string s = "hello";
auto length = s.size();

if(length < 一个负数 ){	// 很可能成立
    ...
}
```

> 有符号数，会自动转型为无符号数。



# \<cctype>处理字符

![image-20220713155840320](%E5%AD%97%E7%AC%A6%E4%B8%B2.assets/image-20220713155840320.png)